== IN PROGRESS:
1.	Binary Tree
2.	Parsing


######################################################################
== NOTES:
#1.	File structure: bonus is just additional sources.

2.	Naming functions:
		functions that return allocated spaces that should be freed in the calling
			function (create... OR make...) example: char **create_split_cmds();
		functions that return values that can't be freed (get...) example:
			size_t len_till_splitter();

3.	The WORD tokens shall have the word expansion rules applied to them immediately
		before the associated command is executed, not at the time the command is parsed.

4.	If the token is an operator, the token identifier for that operator shall result.
	If the string consists solely of digits and the delimiter character is one of '<' or '>',
		the token identifier IO_NUMBER shall be returned.
	Otherwise, the token identifier TOKEN results.

5.	TODO:	-Return different numbers from failed deep functions, and handle them differently in
				calling function.

6.	If any part of word is quoted, the delimiter shall be formed by performing quote removal on word,
		and the here-document lines shall not be expanded. Otherwise, the delimiter shall be the word itself.
	If no part of word is quoted, all lines of the here-document shall be expanded for parameter expansion,
		command substitution, and arithmetic expansion. In this case, the <backslash> in the input behaves as
		the <backslash> inside double-quotes (see Double-Quotes). However, the double-quote character ( ' )' shall not
		be treated specially within a here-document, except when the double-quote appears within "$()", "``", or "${}".

7.	Tilde expansions, parameter expansions, command substitutions, arithmetic expansions, and quote removals that occur
		within a single word expand to a single field. It is only field splitting or pathname expansion that can create
		multiple fields from a single word. The single exception to this rule is the expansion of the special parameter
		'@' within double-quotes, as described in Special Parameters.

8.	The return status (see Exit Status) of a simple command is its exit status as provided by the POSIX 1003.1 waitpid
		function, or 128+n if the command was terminated by signal n.

#9.	Check the output error message of this bash input: (echo hello) hehe"hoho"'haha'
		Can we match the same output with the full token string?